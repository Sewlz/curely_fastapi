import os
import firebase_admin
from firebase_admin import auth
from fastapi import HTTPException
import requests
from app.modules.user.repositories.user_repository import UserRepository
from app.modules.user.schemas.user_schema import UserCreate, UserUpdate


API_KEY = os.getenv("APIKEY")

class UserService:
    @staticmethod
    def resend_verification_email(email: str):
        try:
            # ‚úÖ Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
            try:
                user = auth.get_user_by_email(email)
            except firebase_admin.auth.UserNotFoundError:
                raise HTTPException(status_code=404, detail="Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.")

            # ‚úÖ Ki·ªÉm tra email ƒë√£ x√°c minh ch∆∞a
            if user.email_verified:
                return {"message": "Email ƒë√£ ƒë∆∞·ª£c x√°c minh, kh√¥ng c·∫ßn g·ª≠i l·∫°i."}

            # üî• G·ª≠i l·∫°i email x√°c minh
            verification_link = auth.generate_email_verification_link(email)

            return {
                "message": "ƒê√£ g·ª≠i l·∫°i email x√°c minh.",
                "verification_link": verification_link
            }
        except Exception as e:
            raise HTTPException(status_code=400, detail=str(e))
    

    @staticmethod
    def revoke_user_tokens(user_id: str):
        """
        Thu h·ªìi refresh token c·ªßa ng∆∞·ªùi d√πng, y√™u c·∫ßu h·ªç ph·∫£i ƒëƒÉng nh·∫≠p l·∫°i.
        """
        try:
            auth.revoke_refresh_tokens(user_id)
            print(f"Refresh tokens c·ªßa user {user_id} ƒë√£ b·ªã thu h·ªìi.")
        except Exception as e:
            print("L·ªói khi thu h·ªìi refresh token:", e)
            raise HTTPException(status_code=500, detail="Failed to revoke refresh token")
        
    @staticmethod
    def delete_user(user_id: str):
        """
        X√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng tr√™n Firebase Authentication.
        """
        try:
            auth.delete_user(user_id)
            print(f"‚úÖ User {user_id} ƒë√£ b·ªã x√≥a th√†nh c√¥ng.")
            return {"message": f"User {user_id} ƒë√£ b·ªã x√≥a th√†nh c√¥ng."}
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a user {user_id}: {str(e)}")
            raise Exception("Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng.") 


    @staticmethod   
    def change_password(user_id: str, payload):
        old_password = payload.old_password
        new_password = payload.new_password
        confirm_password = payload.confirm_password

        if new_password != confirm_password:
            raise HTTPException(status_code=400, detail="M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp")

        try:
            # L·∫•y th√¥ng tin user t·ª´ Firebase
            user = auth.get_user(user_id)
            if not user.email:
                raise HTTPException(status_code=400, detail="Kh√¥ng t√¨m th·∫•y email c·ªßa ng∆∞·ªùi d√πng.")

            # X√°c th·ª±c m·∫≠t kh·∫©u c≈© b·∫±ng c√°ch ƒëƒÉng nh·∫≠p
            login_url = f"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={API_KEY}"
            login_payload = {
                "email": user.email,
                "password": old_password,
                "returnSecureToken": True
            }

            response = requests.post(login_url, json=login_payload)
            if response.status_code != 200:
                raise HTTPException(status_code=400, detail="M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c.")

            # C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
            auth.update_user(user_id, password=new_password)
            return {"message": "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng"}

        except Exception as e:
            raise HTTPException(status_code=400, detail=str(e))
        


    @staticmethod
    def create_user(user_id: str, user_data: UserCreate):
        return UserRepository.add_user(user_id, user_data.dict())

    @staticmethod
    def update_user(user_id: str, update_data: UserUpdate):
        return UserRepository.update_user(user_id, update_data.dict(exclude_unset=True))

    @staticmethod
    def get_user(user_id: str):
        return UserRepository.get_user(user_id)
